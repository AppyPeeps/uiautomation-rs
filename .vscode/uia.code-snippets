{
	"Define a new UIPattern": {
		"prefix": "uipattern",
		"body": [
			"/// A wrapper for `IUIAutomation$0`.",
			"#[derive(Debug, Clone)]",
			"pub struct UI$0 {",
			"\tpattern: IUIAutomation$0",
			"}",
			"",
			"impl UI$0 {",
			"}",
			"",
			"impl UIPattern for UI$0 {",
			"\tfn pattern_id() -> i32 {",
			"\t\tUIA_$0Id",
			"\t}",
			"",
			"\tfn new(pattern: IUnknown) -> Result<Self> {",
			"\t\tSelf::try_from(pattern)",
			"\t}",
			"}",
			"",
			"impl TryFrom<IUnknown> for UI$0 {",
			"\ttype Error = Error;",
			"",
			"\tfn try_from(value: IUnknown) -> Result<Self> {",
			"\t\tlet pattern: IUIAutomation$0 = value.cast()?;",
			"\t\tOk(Self {",
			"\t\t\tpattern",
			"\t\t})",
			"\t}",
			"}",
			"",
			"impl From<IUIAutomation$0> for UI$0 {",
			"\tfn from(pattern: IUIAutomation$0) -> Self {",
			"\t\tSelf {",
			"\t\t\tpattern",
			"\t\t}",
			"\t}",
			"}",
			"",
			"impl Into<IUIAutomation$0> for UI$0 {",
			"\tfn into(self) -> IUIAutomation$0 {",
			"\t\tself.pattern",
			"\t}",
			"}",
			"",
			"impl AsRef<IUIAutomation$0> for UI$0 {",
			"\tfn as_ref(&self) -> &IUIAutomation$0 {",
			"\t\t&self.pattern",
			"\t}",
			"}"
		]
	},
	"Define TryFrom trait implemention": {
		"prefix": "tryfrom",
		"body": [
			"impl TryFrom<$1> for $2 {",
			"\ttype Error = Error;",
			"",
			"\tfn try_from(${3:value}: $1) -> Result<Self> {",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"Define TryInto trait implemention": {
		"prefix": "tryinto",
		"body": [
			"impl TryInto<$1> for $2 {",
			"\ttype Error = Error;",
			"",
			"\tfn try_into(self) -> Result<$1> {",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"Define UIAutomation Control": {
		"prefix": "uicontrol",
		"body": [
			"/// Wrapper a ${1} element as control. The control type of the element must be `UIA_${1}ControlTypeId`.",
			"/// ",
			"/// + Must support: None",
			"/// + Conditional support: None",
			"#[derive(Debug)]",
			"pub struct ${1}Control {",
				"\tcontrol: UIElement",
			"}",
			"",
			"impl TryFrom<UIElement> for ${1}Control {",
				"\ttype Error = Error;",
			"",
				"\tfn try_from(control: UIElement) -> Result<Self> {",
					"\t\tas_control!(control, UIA_${1}ControlTypeId)",
				"\t}",
			"}",
			"",
			"impl Into<UIElement> for ${1}Control {",
				"\tfn into(self) -> UIElement {",
					"\t\tself.control",
				"\t}",
			"}",
			"",
			"impl AsRef<UIElement> for ${1}Control {",
				"\tfn as_ref(&self) -> &UIElement {",
					"\t\t&self.control",
				"\t}",
			"}",
			"",
			"impl Display for ${1}Control {",
				"\tfn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
					"\t\twrite!(f, \"${1}({})\", self.control.get_name().unwrap_or_default())",
				"\t}",
			"}"
		]
	},
	"Implement a derive macro": {
		"prefix": "implderive",
		"body": [
			"pub(crate) fn impl_$1(ast: &syn::DeriveInput) -> TokenStream {",
				"\tlet name = &ast.ident;",
				"\tlet gen = quote! {",
				"",
				"\t};",
				"\tgen.into()",    
			"}"
		]
	}
}